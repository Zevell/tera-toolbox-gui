const fs = require('fs');
const path = require('path');

class Module {
  constructor(manager, moduleInfo) {
    this.manager = manager;
    this.info = moduleInfo;
    this.clientInterface = manager.clientInterface;
    this.options = moduleInfo.options;
    this.name = moduleInfo.name;
    this.niceName = this.options.niceName || moduleInfo.rawName;
    this.rootFolder = moduleInfo.path;

    // Module settings
    this.settingsVersion = this.options.settingsVersion || null;
    this.settingsFile = (this.settingsVersion === null) ? '' : path.join(this.rootFolder, this.options.settingsFile || 'module_settings.json');
    this.settingsMigrator = (this.settingsVersion === null) ? '' : path.join(this.rootFolder, this.options.settingsMigrator || 'module_settings_migrator.js');
    this.settingsAutosaveOnClose = (this.options.settingsAutosaveOnClose === undefined) ? true : this.options.settingsAutosaveOnClose;

    // Load settings
    this.loadSettings();

    // Implementation will be set later when loaded by manager
    this.instance = null;
  }

  destructor() {
    try {
      if (typeof this.instance.destructor === 'function')
        this.instance.destructor();

      if (this.settingsAutosaveOnClose)
        this.saveSettings();
    } finally {
      this.instance = null;
    }
  }

  get proxyAuthor() { return 'caali'; }
  get region() { return this.clientInterface.region; }
  get majorPatchVersion() { return this.clientInterface.majorPatchVersion; }
  get minorPatchVersion() { return this.clientInterface.minorPatchVersion; }

  // Module settings
  loadSettings() {
    if(this.settingsVersion === null)
      return;

    this.settings = {};

    let data = null;
    try {
      data = fs.readFileSync(this.settingsFile);
    } catch (_) {
      this.settings = this.migrateSettings(null, this.settingsVersion);
      return;
    }

    try {
      data = JSON.parse(data);
    } catch (e) {
      if(e.toString().includes('at position 0')) {
          this.error('You closed the program improperly the last time you were using it!');
          this.error(`This caused the settings for module "${this.name}" to become corrupted!`);
          this.error('The module will load default settings now, so adjust them according to your needs.');
          this.error('Please remember to close the program properly: first close the game, then close TERA Toolbox using the X button!');
          this.error('Do not shut down your computer while TERA Toolbox is running!');

          this.settings = this.migrateSettings(null, this.settingsVersion);
          this.saveSettings();
          return;
      } else {
          this.error(`Invalid settings format for module "${this.name}"!`);
          this.error('This means that you broke it when manually editing it.');
          this.error('Please fix the settings file manually or delete it so that default settings can be restored.');
          this.error('------------------------------------------');
          this.error('Advanced error details');
          this.error('The full path to the file is:');
          this.error(`  ${this.settingsFile}`);
          this.error('The full error message is:');
          this.error(`  ${e}`);
          this.error('------------------------------------------');
          throw e;
      }
    }

    if(this.settingsVersion !== data.version) {
      this.settings = this.migrateSettings(data.version, this.settingsVersion, (data.version !== undefined && data.data !== undefined) ? data.data : data);
      return;
    }

    this.settings = data.data;
  }

  saveSettings() {
    if(this.settingsVersion === null)
      return;

    let data = null;
    try {
      data = JSON.stringify({'version': this.settingsVersion, 'data': this.settings}, null, 4);

      try {
        fs.writeFileSync(this.settingsFile, data);
      } catch (e) {
        console.error(`ERROR: Unable to store settings for module ${this.name}! The full error message is:\nERROR: ${e}`);
      }
    } catch (e) {
      console.error(`ERROR: Unable to serialize settings for module ${this.name}! The full error message is:\nERROR: ${e}`);
    }
  }

  migrateSettings(from_ver, to_ver, settings) {
    try {
      let migrator = require(this.settingsMigrator);
      try {
        return migrator(from_ver, to_ver, settings);
      } catch (e) {
        console.error(`ERROR: An error occured while migrating the settings for module ${this.name}!\nERROR: The full error message is:\nERROR: ${e}`);
        throw e;
      }
    } catch (e) {
      console.error(`ERROR: Unable to load settings migrator for module ${this.name}!\nERROR: The full error message is:\nERROR: ${e}`);
      throw e;
    }
  }

  // Logging
  log(...args) { console.log(`[${this.name}]`, ...args); }
  warn(...args) { console.warn(`[${this.name}] WARNING:`, ...args); }
  error(...args) { console.error(`[${this.name}] ERROR:`, ...args); }

  // Client Interface
  queryData(...args) { return this.clientInterface.queryData(...args); }

  // GPK Mods
  installGPK(fromPath, filename = null) { return this.clientInterface.installGPK(path.join(this.info.path, fromPath), filename); }
}

module.exports = Module;
